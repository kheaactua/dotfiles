#!/bin/zsh

# Give xrandr and i3wm a moment to settle after the display change
sleep 0.5

declare -r LOG_FILE="/tmp/i3_autorandr_debug.log"

get_all_outputs_by_resolution() {
  # Function to get all xrandr output names (e.g., DisplayPort-5)
  # for monitors matching specific resolution.
  # Returns a newline-separated list of matching outputs.

  local target_res_awk="$1"
  xrandr --verbose | awk -v target_res="$target_res_awk" '
    # Look for lines like "DisplayPort-1 connected primary 2560x1080+0+0 ..."
    /^[A-Za-z0-9_-]+ connected/ {
      current_output = $1; # e.g., "DisplayPort-1"

      # Extract resolution (e.g., "2560x1080") from the line
      # This regex looks for "WIDTHxHEIGHT+OFFSETX+OFFSETY" and extracts "WIDTHxHEIGHT"
      match($0, /[0-9]+x[0-9]+\+[0-9]+\+[0-9]+/, res_offset_arr);
      current_res = substr(res_offset_arr[0], 1, index(res_offset_arr[0], "+") - 1);

      # Compare with target resolution
      if (current_res == target_res) {
        print current_output;
      }
    }
  '
}

detect_displays() {
  # The display IDs only seem to change on khea.  I blame the KVM.  I can't
  # detect the difference by resolution alone on the worksetup, so just
  # hardcode for today

  if [[ "khea" != "$(hostname)" ]]; then
    echo "DP-0 DP-2.8 DP-2.1"
    return
  fi

  # --- Define Monitor Identification Criteria ---
  # These values MUST match your xrandr --verbose output exactly.

  local -A MONITOR_RESOLUTIONS=(
    ["home_left"]="1920x1200"
    ["home_center"]="2560x1080"
    ["home_right"]="1080x1920" # Portrait mode, daisy chained

    # I'll have to figure out a way to differentiate left and center
    ["work_left"]="1920x1200"
    ["work_center"]="1920x1200"
    ["work_right"]="1200x1920"
  )

  # --- Identify Current Outputs ---
  local left_key="home_left"
  local center_key="home_center"
  local right_key="home_right"
  if [[ "khea" != "$(hostname)" ]]; then
    left_key="work_left"
    center_key="work_center"
    right_key="work_right"
  fi

  local -r LEFT_DISPLAY_OUTPUT="$(get_all_outputs_by_resolution "${MONITOR_RESOLUTIONS[${left_key}]}" | head -n 1)"
  local -r CENTER_DISPLAY_OUTPUT=$(get_all_outputs_by_resolution "${MONITOR_RESOLUTIONS[${center_key}]}" | head -n 1)
  local -r RIGHT_DISPLAY_OUTPUT="$(get_all_outputs_by_resolution "${MONITOR_RESOLUTIONS[${right_key}]}" | head -n 1)"

  local outputs=("${LEFT_DISPLAY_OUTPUT}" "${CENTER_DISPLAY_OUTPUT}" "${RIGHT_DISPLAY_OUTPUT}")
  echo "${outputs[*]}"
}

move_workspace_to_output() {
  local -r log_file="${LOG_FILE:-"/tmp/i3_autorandr_debug.log"}"
  local -r workspace_number="$1"
  local -r output_name="$2"

  local output

  if [[ ! " ${i3_workspaces[@]} " =~ " ${workspace_number} " ]]; then
    echo "Workspace ${workspace_number} does not exist, skipping move." >> "${log_file}"
    return
  fi

  # TODO I think this actually uses the name, not the number
  if [ -n "${output_name}" ]; then
    output=$(i3-msg \[workspace=${workspace_number}\] move workspace to output ${output_name} 2>/dev/null)
    echo "i3-msg '[workspace=${workspace_number}]' move workspace to output ${output_name} â†’ ${output}" >> "${log_file}"
  else
    echo "No output detected for workspace ${workspace_number}, skipping move." >> "${log_file}"
  fi
}

arrange_displays() {
  # --- Log file settings ---
  local -r log_file="${LOG_FILE:-"/tmp/i3_autorandr_debug.log"}"
  local -r MAX_LOG_LINES=10 # Keep only the last 50 lines in the log file

  local LEFT_DISPLAY_OUTPUT
  local CENTER_DISPLAY_OUTPUT
  local  RIGHT_DISPLAY_OUTPUT

  local -a outputs;
  outputs=(${(z)$(detect_displays)})
  # read -a outputs <<< "$(detect_displays)"
  LEFT_DISPLAY_OUTPUT="${outputs[1]}"
  CENTER_DISPLAY_OUTPUT="${outputs[2]}"
  RIGHT_DISPLAY_OUTPUT="${outputs[3]}"

  # --- Debugging: Writes detected outputs to a log file ---
  # Check the log file if things don't work as expected.
  echo "--- $(date) ---" >> "${log_file}"
  echo "Left:    ${LEFT_DISPLAY_OUTPUT}"   >> "${log_file}"
  echo "Central: ${CENTER_DISPLAY_OUTPUT}" >> "${log_file}"
  echo "Right:   ${RIGHT_DISPLAY_OUTPUT}"  >> "${log_file}"

  # Now, trim the log file to MAX_LOG_LINES
  tail -n "${MAX_LOG_LINES}" "${log_file}" > "${log_file}.tmp" && mv "${log_file}.tmp" "${log_file}"

  # --- Move your workspaces to their correct outputs ---
  # Adjust workspace numbers and target outputs as per your preference.
  # Only try to move if the output was actually detected.

  local -a i3_workspaces=($(i3-msg -t get_workspaces | jq '.[].num'))

  # Assign workspaces to displays
  if [ -n "${LEFT_DISPLAY_OUTPUT}" ]; then
    for i in 1 8; do
      move_workspace_to_output "${i}" "${LEFT_DISPLAY_OUTPUT}"
    done
  fi

  if [ -n "${CENTER_DISPLAY_OUTPUT}" ]; then
    for i in 2 4 5 6 7 9 10; do
      move_workspace_to_output "${i}" "${CENTER_DISPLAY_OUTPUT}"
    done
  fi

  if [ -n "${RIGHT_DISPLAY_OUTPUT}" ]; then
    for i in 3 11 12; do
      move_workspace_to_output "${i}" "${RIGHT_DISPLAY_OUTPUT}"
    done
  fi
}

fix_backgrounds() {
  # Change Wallpaper ---
  if command -v feh >/dev/null 2>&1; then
    feh --randomize --bg-fill ~/Desktop/Backgrounds/*
  fi
}

# Optional: Focus on a specific workspace after the move
# i3-msg "workspace 1"

postfix_main() {
  arrange_displays
  fix_backgrounds
}

postfix_main

# vim: ft=sh ts=2 sw=2 sts=2 et
